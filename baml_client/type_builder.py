###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import typing
from baml_py.baml_py import FieldType, EnumValueBuilder, EnumBuilder, ClassBuilder
from baml_py.type_builder import TypeBuilder as _TypeBuilder, ClassPropertyBuilder, ClassPropertyViewer, EnumValueViewer
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME


class TypeBuilder(_TypeBuilder):
    def __init__(self):
        super().__init__(classes=set(
          ["ImageElement","ImageStyle","OutlinePoint","OutlineSection","PresentationInput","SlideContent","SlideElement",]
        ), enums=set(
          []
        ), runtime=DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME)


    @property
    def ImageElement(self) -> "ImageElementAst":
        return ImageElementAst(self)

    @property
    def ImageStyle(self) -> "ImageStyleAst":
        return ImageStyleAst(self)

    @property
    def OutlinePoint(self) -> "OutlinePointAst":
        return OutlinePointAst(self)

    @property
    def OutlineSection(self) -> "OutlineSectionAst":
        return OutlineSectionAst(self)

    @property
    def PresentationInput(self) -> "PresentationInputAst":
        return PresentationInputAst(self)

    @property
    def SlideContent(self) -> "SlideContentAst":
        return SlideContentAst(self)

    @property
    def SlideElement(self) -> "SlideElementAst":
        return SlideElementAst(self)





class ImageElementAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("ImageElement")
        self._properties: typing.Set[str] = set([ "id",  "type",  "x",  "y",  "width",  "height",  "src",  "alt",  "caption",  "prompt",  "style", ])
        self._props = ImageElementProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "ImageElementProperties":
        return self._props


class ImageElementViewer(ImageElementAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class ImageElementProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def id(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("id"))

    @property
    def type(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("type"))

    @property
    def x(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("x"))

    @property
    def y(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("y"))

    @property
    def width(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("width"))

    @property
    def height(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("height"))

    @property
    def src(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("src"))

    @property
    def alt(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("alt"))

    @property
    def caption(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("caption"))

    @property
    def prompt(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("prompt"))

    @property
    def style(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("style"))

    

class ImageStyleAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("ImageStyle")
        self._properties: typing.Set[str] = set([ "borderRadius",  "objectFit",  "marginBottom", ])
        self._props = ImageStyleProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "ImageStyleProperties":
        return self._props


class ImageStyleViewer(ImageStyleAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class ImageStyleProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def borderRadius(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("borderRadius"))

    @property
    def objectFit(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("objectFit"))

    @property
    def marginBottom(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("marginBottom"))

    

class OutlinePointAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("OutlinePoint")
        self._properties: typing.Set[str] = set([ "text", ])
        self._props = OutlinePointProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "OutlinePointProperties":
        return self._props


class OutlinePointViewer(OutlinePointAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class OutlinePointProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def text(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("text"))

    

class OutlineSectionAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("OutlineSection")
        self._properties: typing.Set[str] = set([ "id",  "title",  "points", ])
        self._props = OutlineSectionProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "OutlineSectionProperties":
        return self._props


class OutlineSectionViewer(OutlineSectionAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class OutlineSectionProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def id(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("id"))

    @property
    def title(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("title"))

    @property
    def points(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("points"))

    

class PresentationInputAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("PresentationInput")
        self._properties: typing.Set[str] = set([ "id",  "title",  "outline", ])
        self._props = PresentationInputProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "PresentationInputProperties":
        return self._props


class PresentationInputViewer(PresentationInputAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class PresentationInputProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def id(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("id"))

    @property
    def title(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("title"))

    @property
    def outline(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("outline"))

    

class SlideContentAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("SlideContent")
        self._properties: typing.Set[str] = set([ "slide_id",  "background",  "content", ])
        self._props = SlideContentProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "SlideContentProperties":
        return self._props


class SlideContentViewer(SlideContentAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class SlideContentProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def slide_id(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("slide_id"))

    @property
    def background(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("background"))

    @property
    def content(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("content"))

    

class SlideElementAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("SlideElement")
        self._properties: typing.Set[str] = set([ "id",  "x",  "y",  "width",  "height",  "html", ])
        self._props = SlideElementProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "SlideElementProperties":
        return self._props


class SlideElementViewer(SlideElementAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class SlideElementProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def id(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("id"))

    @property
    def x(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("x"))

    @property
    def y(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("y"))

    @property
    def width(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("width"))

    @property
    def height(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("height"))

    @property
    def html(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("html"))

    




__all__ = ["TypeBuilder"]