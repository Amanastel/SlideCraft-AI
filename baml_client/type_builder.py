###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import typing
from baml_py.baml_py import FieldType, EnumValueBuilder, EnumBuilder, ClassBuilder
from baml_py.type_builder import TypeBuilder as _TypeBuilder, ClassPropertyBuilder, ClassPropertyViewer, EnumValueViewer
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME


class TypeBuilder(_TypeBuilder):
    def __init__(self):
        super().__init__(classes=set(
          ["CustomerAnalysis","DynamicInputContext","ImageElement","ImageElementEdit","ImageStyle","ImageStyleEdit","MarketPosition","OutlinePoint","OutlineSection","PresentationInput","SlideContent","SlideContentWithType","SlideDetail","SlideEditRequest","SlideElement","SlideElementEdit","StrategicPresentationOutline","StrategicSalesPlan",]
        ), enums=set(
          []
        ), runtime=DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME)


    @property
    def CustomerAnalysis(self) -> "CustomerAnalysisAst":
        return CustomerAnalysisAst(self)

    @property
    def DynamicInputContext(self) -> "DynamicInputContextAst":
        return DynamicInputContextAst(self)

    @property
    def ImageElement(self) -> "ImageElementAst":
        return ImageElementAst(self)

    @property
    def ImageElementEdit(self) -> "ImageElementEditAst":
        return ImageElementEditAst(self)

    @property
    def ImageStyle(self) -> "ImageStyleAst":
        return ImageStyleAst(self)

    @property
    def ImageStyleEdit(self) -> "ImageStyleEditAst":
        return ImageStyleEditAst(self)

    @property
    def MarketPosition(self) -> "MarketPositionAst":
        return MarketPositionAst(self)

    @property
    def OutlinePoint(self) -> "OutlinePointAst":
        return OutlinePointAst(self)

    @property
    def OutlineSection(self) -> "OutlineSectionAst":
        return OutlineSectionAst(self)

    @property
    def PresentationInput(self) -> "PresentationInputAst":
        return PresentationInputAst(self)

    @property
    def SlideContent(self) -> "SlideContentAst":
        return SlideContentAst(self)

    @property
    def SlideContentWithType(self) -> "SlideContentWithTypeAst":
        return SlideContentWithTypeAst(self)

    @property
    def SlideDetail(self) -> "SlideDetailAst":
        return SlideDetailAst(self)

    @property
    def SlideEditRequest(self) -> "SlideEditRequestAst":
        return SlideEditRequestAst(self)

    @property
    def SlideElement(self) -> "SlideElementAst":
        return SlideElementAst(self)

    @property
    def SlideElementEdit(self) -> "SlideElementEditAst":
        return SlideElementEditAst(self)

    @property
    def StrategicPresentationOutline(self) -> "StrategicPresentationOutlineAst":
        return StrategicPresentationOutlineAst(self)

    @property
    def StrategicSalesPlan(self) -> "StrategicSalesPlanAst":
        return StrategicSalesPlanAst(self)





class CustomerAnalysisAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("CustomerAnalysis")
        self._properties: typing.Set[str] = set([ "core_problem",  "business_consequences",  "ideal_customer_profile",  "key_stakeholders",  "anticipated_objections", ])
        self._props = CustomerAnalysisProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "CustomerAnalysisProperties":
        return self._props


class CustomerAnalysisViewer(CustomerAnalysisAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class CustomerAnalysisProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def core_problem(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("core_problem"))

    @property
    def business_consequences(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("business_consequences"))

    @property
    def ideal_customer_profile(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("ideal_customer_profile"))

    @property
    def key_stakeholders(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("key_stakeholders"))

    @property
    def anticipated_objections(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("anticipated_objections"))

    

class DynamicInputContextAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("DynamicInputContext")
        self._properties: typing.Set[str] = set([ "content",  "audience_type",  "scenario",  "tone",  "pages",  "meeting_deal_summary",  "file_context", ])
        self._props = DynamicInputContextProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "DynamicInputContextProperties":
        return self._props


class DynamicInputContextViewer(DynamicInputContextAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class DynamicInputContextProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def content(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("content"))

    @property
    def audience_type(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("audience_type"))

    @property
    def scenario(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("scenario"))

    @property
    def tone(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("tone"))

    @property
    def pages(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("pages"))

    @property
    def meeting_deal_summary(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("meeting_deal_summary"))

    @property
    def file_context(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("file_context"))

    

class ImageElementAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("ImageElement")
        self._properties: typing.Set[str] = set([ "id",  "type",  "x",  "y",  "width",  "height",  "src",  "alt",  "caption",  "prompt",  "style", ])
        self._props = ImageElementProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "ImageElementProperties":
        return self._props


class ImageElementViewer(ImageElementAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class ImageElementProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def id(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("id"))

    @property
    def type(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("type"))

    @property
    def x(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("x"))

    @property
    def y(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("y"))

    @property
    def width(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("width"))

    @property
    def height(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("height"))

    @property
    def src(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("src"))

    @property
    def alt(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("alt"))

    @property
    def caption(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("caption"))

    @property
    def prompt(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("prompt"))

    @property
    def style(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("style"))

    

class ImageElementEditAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("ImageElementEdit")
        self._properties: typing.Set[str] = set([ "id",  "type",  "x",  "y",  "width",  "height",  "src",  "alt",  "caption",  "prompt",  "style", ])
        self._props = ImageElementEditProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "ImageElementEditProperties":
        return self._props


class ImageElementEditViewer(ImageElementEditAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class ImageElementEditProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def id(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("id"))

    @property
    def type(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("type"))

    @property
    def x(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("x"))

    @property
    def y(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("y"))

    @property
    def width(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("width"))

    @property
    def height(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("height"))

    @property
    def src(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("src"))

    @property
    def alt(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("alt"))

    @property
    def caption(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("caption"))

    @property
    def prompt(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("prompt"))

    @property
    def style(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("style"))

    

class ImageStyleAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("ImageStyle")
        self._properties: typing.Set[str] = set([ "borderRadius",  "objectFit",  "marginBottom", ])
        self._props = ImageStyleProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "ImageStyleProperties":
        return self._props


class ImageStyleViewer(ImageStyleAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class ImageStyleProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def borderRadius(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("borderRadius"))

    @property
    def objectFit(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("objectFit"))

    @property
    def marginBottom(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("marginBottom"))

    

class ImageStyleEditAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("ImageStyleEdit")
        self._properties: typing.Set[str] = set([ "borderRadius",  "objectFit",  "marginBottom", ])
        self._props = ImageStyleEditProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "ImageStyleEditProperties":
        return self._props


class ImageStyleEditViewer(ImageStyleEditAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class ImageStyleEditProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def borderRadius(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("borderRadius"))

    @property
    def objectFit(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("objectFit"))

    @property
    def marginBottom(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("marginBottom"))

    

class MarketPositionAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("MarketPosition")
        self._properties: typing.Set[str] = set([ "market_context",  "unique_value_proposition",  "data_proof",  "social_proof",  "technical_proof", ])
        self._props = MarketPositionProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "MarketPositionProperties":
        return self._props


class MarketPositionViewer(MarketPositionAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class MarketPositionProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def market_context(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("market_context"))

    @property
    def unique_value_proposition(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("unique_value_proposition"))

    @property
    def data_proof(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("data_proof"))

    @property
    def social_proof(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("social_proof"))

    @property
    def technical_proof(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("technical_proof"))

    

class OutlinePointAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("OutlinePoint")
        self._properties: typing.Set[str] = set([ "text", ])
        self._props = OutlinePointProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "OutlinePointProperties":
        return self._props


class OutlinePointViewer(OutlinePointAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class OutlinePointProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def text(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("text"))

    

class OutlineSectionAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("OutlineSection")
        self._properties: typing.Set[str] = set([ "id",  "title",  "points", ])
        self._props = OutlineSectionProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "OutlineSectionProperties":
        return self._props


class OutlineSectionViewer(OutlineSectionAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class OutlineSectionProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def id(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("id"))

    @property
    def title(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("title"))

    @property
    def points(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("points"))

    

class PresentationInputAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("PresentationInput")
        self._properties: typing.Set[str] = set([ "id",  "title",  "outline", ])
        self._props = PresentationInputProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "PresentationInputProperties":
        return self._props


class PresentationInputViewer(PresentationInputAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class PresentationInputProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def id(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("id"))

    @property
    def title(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("title"))

    @property
    def outline(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("outline"))

    

class SlideContentAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("SlideContent")
        self._properties: typing.Set[str] = set([ "slide_id",  "background",  "content", ])
        self._props = SlideContentProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "SlideContentProperties":
        return self._props


class SlideContentViewer(SlideContentAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class SlideContentProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def slide_id(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("slide_id"))

    @property
    def background(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("background"))

    @property
    def content(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("content"))

    

class SlideContentWithTypeAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("SlideContentWithType")
        self._properties: typing.Set[str] = set([ "slide_id",  "background",  "content", ])
        self._props = SlideContentWithTypeProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "SlideContentWithTypeProperties":
        return self._props


class SlideContentWithTypeViewer(SlideContentWithTypeAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class SlideContentWithTypeProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def slide_id(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("slide_id"))

    @property
    def background(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("background"))

    @property
    def content(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("content"))

    

class SlideDetailAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("SlideDetail")
        self._properties: typing.Set[str] = set([ "id",  "title",  "objective",  "key_content_elements",  "visual_concept",  "sales_narrative",  "strategic_justification", ])
        self._props = SlideDetailProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "SlideDetailProperties":
        return self._props


class SlideDetailViewer(SlideDetailAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class SlideDetailProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def id(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("id"))

    @property
    def title(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("title"))

    @property
    def objective(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("objective"))

    @property
    def key_content_elements(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("key_content_elements"))

    @property
    def visual_concept(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("visual_concept"))

    @property
    def sales_narrative(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("sales_narrative"))

    @property
    def strategic_justification(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("strategic_justification"))

    

class SlideEditRequestAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("SlideEditRequest")
        self._properties: typing.Set[str] = set([ "slide",  "editPrompt",  "theme", ])
        self._props = SlideEditRequestProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "SlideEditRequestProperties":
        return self._props


class SlideEditRequestViewer(SlideEditRequestAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class SlideEditRequestProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def slide(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("slide"))

    @property
    def editPrompt(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("editPrompt"))

    @property
    def theme(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("theme"))

    

class SlideElementAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("SlideElement")
        self._properties: typing.Set[str] = set([ "id",  "x",  "y",  "width",  "height",  "html", ])
        self._props = SlideElementProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "SlideElementProperties":
        return self._props


class SlideElementViewer(SlideElementAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class SlideElementProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def id(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("id"))

    @property
    def x(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("x"))

    @property
    def y(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("y"))

    @property
    def width(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("width"))

    @property
    def height(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("height"))

    @property
    def html(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("html"))

    

class SlideElementEditAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("SlideElementEdit")
        self._properties: typing.Set[str] = set([ "id",  "type",  "x",  "y",  "width",  "height",  "html", ])
        self._props = SlideElementEditProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "SlideElementEditProperties":
        return self._props


class SlideElementEditViewer(SlideElementEditAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class SlideElementEditProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def id(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("id"))

    @property
    def type(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("type"))

    @property
    def x(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("x"))

    @property
    def y(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("y"))

    @property
    def width(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("width"))

    @property
    def height(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("height"))

    @property
    def html(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("html"))

    

class StrategicPresentationOutlineAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("StrategicPresentationOutline")
        self._properties: typing.Set[str] = set([ "title",  "id",  "strategic_plan",  "slides", ])
        self._props = StrategicPresentationOutlineProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "StrategicPresentationOutlineProperties":
        return self._props


class StrategicPresentationOutlineViewer(StrategicPresentationOutlineAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class StrategicPresentationOutlineProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def title(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("title"))

    @property
    def id(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("id"))

    @property
    def strategic_plan(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("strategic_plan"))

    @property
    def slides(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("slides"))

    

class StrategicSalesPlanAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("StrategicSalesPlan")
        self._properties: typing.Set[str] = set([ "presenter_role",  "presentation_task",  "primary_cta",  "customer_analysis",  "market_position", ])
        self._props = StrategicSalesPlanProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "StrategicSalesPlanProperties":
        return self._props


class StrategicSalesPlanViewer(StrategicSalesPlanAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class StrategicSalesPlanProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def presenter_role(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("presenter_role"))

    @property
    def presentation_task(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("presentation_task"))

    @property
    def primary_cta(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("primary_cta"))

    @property
    def customer_analysis(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("customer_analysis"))

    @property
    def market_position(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("market_position"))

    




__all__ = ["TypeBuilder"]