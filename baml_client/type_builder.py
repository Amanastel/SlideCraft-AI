###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import typing
from baml_py.baml_py import FieldType, EnumValueBuilder, EnumBuilder, ClassBuilder
from baml_py.type_builder import TypeBuilder as _TypeBuilder, ClassPropertyBuilder, ClassPropertyViewer, EnumValueViewer
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME


class TypeBuilder(_TypeBuilder):
    def __init__(self):
        super().__init__(classes=set(
          ["ExtractedInfo","Parameter","Plan","Resume","Tool","ToolCall","Tools",]
        ), enums=set(
          ["Urgency",]
        ), runtime=DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME)


    @property
    def ExtractedInfo(self) -> "ExtractedInfoAst":
        return ExtractedInfoAst(self)

    @property
    def Parameter(self) -> "ParameterAst":
        return ParameterAst(self)

    @property
    def Plan(self) -> "PlanAst":
        return PlanAst(self)

    @property
    def Resume(self) -> "ResumeAst":
        return ResumeAst(self)

    @property
    def Tool(self) -> "ToolAst":
        return ToolAst(self)

    @property
    def ToolCall(self) -> "ToolCallAst":
        return ToolCallAst(self)

    @property
    def Tools(self) -> "ToolsAst":
        return ToolsAst(self)





class ExtractedInfoAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("ExtractedInfo")
        self._properties: typing.Set[str] = set([ "fullName",  "emailAddress",  "requestDetails",  "urgencyLevel", ])
        self._props = ExtractedInfoProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "ExtractedInfoProperties":
        return self._props


class ExtractedInfoViewer(ExtractedInfoAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class ExtractedInfoProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def fullName(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("fullName"))

    @property
    def emailAddress(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("emailAddress"))

    @property
    def requestDetails(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("requestDetails"))

    @property
    def urgencyLevel(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("urgencyLevel"))

    

class ParameterAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("Parameter")
        self._properties: typing.Set[str] = set([ "name",  "type",  "description",  "required", ])
        self._props = ParameterProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "ParameterProperties":
        return self._props


class ParameterViewer(ParameterAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class ParameterProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def name(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("name"))

    @property
    def type(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("type"))

    @property
    def description(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("description"))

    @property
    def required(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("required"))

    

class PlanAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("Plan")
        self._properties: typing.Set[str] = set([ "steps", ])
        self._props = PlanProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "PlanProperties":
        return self._props


class PlanViewer(PlanAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class PlanProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def steps(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("steps"))

    

class ResumeAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("Resume")
        self._properties: typing.Set[str] = set([ "name",  "email",  "experience",  "skills", ])
        self._props = ResumeProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "ResumeProperties":
        return self._props


class ResumeViewer(ResumeAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class ResumeProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def name(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("name"))

    @property
    def email(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("email"))

    @property
    def experience(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("experience"))

    @property
    def skills(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("skills"))

    

class ToolAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("Tool")
        self._properties: typing.Set[str] = set([ "name",  "description",  "parameters",  "returnType", ])
        self._props = ToolProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "ToolProperties":
        return self._props


class ToolViewer(ToolAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class ToolProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def name(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("name"))

    @property
    def description(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("description"))

    @property
    def parameters(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("parameters"))

    @property
    def returnType(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("returnType"))

    

class ToolCallAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("ToolCall")
        self._properties: typing.Set[str] = set([ "toolName",  "arguments",  "resultName",  "description",  "dependsOn", ])
        self._props = ToolCallProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "ToolCallProperties":
        return self._props


class ToolCallViewer(ToolCallAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class ToolCallProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def toolName(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("toolName"))

    @property
    def arguments(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("arguments"))

    @property
    def resultName(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("resultName"))

    @property
    def description(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("description"))

    @property
    def dependsOn(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("dependsOn"))

    

class ToolsAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("Tools")
        self._properties: typing.Set[str] = set([ "name",  "args", ])
        self._props = ToolsProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "ToolsProperties":
        return self._props


class ToolsViewer(ToolsAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class ToolsProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def name(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("name"))

    @property
    def args(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("args"))

    



class UrgencyAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.enum("Urgency")
        self._values: typing.Set[str] = set([ "LOW",  "NORMAL",  "HIGH",  "CRITICAL", ])
        self._vals = UrgencyValues(self._bldr, self._values)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def values(self) -> "UrgencyValues":
        return self._vals


class UrgencyViewer(UrgencyAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    def list_values(self) -> typing.List[typing.Tuple[str, EnumValueViewer]]:
        return [(name, EnumValueViewer(self._bldr.value(name))) for name in self._values]


class UrgencyValues:
    def __init__(self, enum_bldr: EnumBuilder, values: typing.Set[str]):
        self.__bldr = enum_bldr
        self.__values = values

    

    @property
    def LOW(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("LOW"))
    

    @property
    def NORMAL(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("NORMAL"))
    

    @property
    def HIGH(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("HIGH"))
    

    @property
    def CRITICAL(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("CRITICAL"))
    

    


__all__ = ["TypeBuilder"]