###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum

from pydantic import BaseModel, ConfigDict

from typing_extensions import TypeAlias, Literal
from typing import Dict, Generic, List, Optional, TypeVar, Union


T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: Dict[CheckName, Check]

def get_checks(checks: Dict[CheckName, Check]) -> List[Check]:
    return list(checks.values())

def all_succeeded(checks: Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))



class CustomerAnalysis(BaseModel):
    core_problem: str
    business_consequences: str
    ideal_customer_profile: str
    key_stakeholders: List[str]
    anticipated_objections: List[str]

class DynamicInputContext(BaseModel):
    content: str
    audience_type: Optional[str] = None
    scenario: Optional[str] = None
    tone: Optional[str] = None
    pages: Optional[str] = None
    meeting_deal_summary: Optional[str] = None
    file_context: Optional[str] = None

class ImageElement(BaseModel):
    id: str
    type: str
    x: int
    y: int
    width: int
    height: int
    src: str
    alt: str
    caption: str
    prompt: str
    style: "ImageStyle"

class ImageElementEdit(BaseModel):
    id: str
    type: str
    x: int
    y: int
    width: int
    height: int
    src: str
    alt: str
    caption: str
    prompt: str
    style: "ImageStyleEdit"

class ImageStyle(BaseModel):
    borderRadius: str
    objectFit: str
    marginBottom: str

class ImageStyleEdit(BaseModel):
    borderRadius: str
    objectFit: str
    marginBottom: str

class MarketPosition(BaseModel):
    market_context: str
    unique_value_proposition: str
    data_proof: List[str]
    social_proof: List[str]
    technical_proof: List[str]

class OutlinePoint(BaseModel):
    text: str

class OutlineSection(BaseModel):
    id: int
    title: str
    points: List[str]

class PresentationInput(BaseModel):
    id: int
    title: str
    outline: List["OutlineSection"]

class SlideContent(BaseModel):
    slide_id: str
    background: str
    content: List[Union["SlideElement", "ImageElement"]]

class SlideContentWithType(BaseModel):
    slide_id: str
    background: str
    content: List[Union["SlideElementEdit", "ImageElementEdit"]]

class SlideDetail(BaseModel):
    id: int
    title: str
    objective: str
    key_content_elements: List[str]
    visual_concept: str
    sales_narrative: str
    strategic_justification: str

class SlideEditRequest(BaseModel):
    slide: "SlideContentWithType"
    editPrompt: str
    theme: str

class SlideElement(BaseModel):
    id: str
    x: int
    y: int
    width: int
    height: int
    html: str

class SlideElementEdit(BaseModel):
    id: str
    type: str
    x: int
    y: int
    width: int
    height: int
    html: str

class StrategicPresentationOutline(BaseModel):
    title: str
    id: int
    strategic_plan: "StrategicSalesPlan"
    slides: List["SlideDetail"]

class StrategicSalesPlan(BaseModel):
    presenter_role: str
    presentation_task: str
    primary_cta: str
    customer_analysis: "CustomerAnalysis"
    market_position: "MarketPosition"
