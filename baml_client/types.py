###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum

from pydantic import BaseModel, ConfigDict

from typing_extensions import TypeAlias, Literal
from typing import Dict, Generic, List, Optional, TypeVar, Union


T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: Dict[CheckName, Check]

def get_checks(checks: Dict[CheckName, Check]) -> List[Check]:
    return list(checks.values())

def all_succeeded(checks: Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))



class Urgency(str, Enum):
    
    LOW = "LOW"
    NORMAL = "NORMAL"
    HIGH = "HIGH"
    CRITICAL = "CRITICAL"

class ExtractedInfo(BaseModel):
    fullName: str
    emailAddress: str
    requestDetails: str
    urgencyLevel: "Urgency"

class Parameter(BaseModel):
    name: str
    type: str
    description: str
    required: bool

class Plan(BaseModel):
    steps: List["ToolCall"]

class Resume(BaseModel):
    name: str
    email: str
    experience: List[str]
    skills: List[str]

class Tool(BaseModel):
    name: str
    description: str
    parameters: List["Parameter"]
    returnType: str

class ToolCall(BaseModel):
    toolName: str
    arguments: Dict[str, str]
    resultName: str
    description: str
    dependsOn: List[str]

class Tools(BaseModel):
    name: str
    args: Dict[str, str]
