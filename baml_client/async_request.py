###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Any, Dict, List, Optional, Union, TypedDict, Type
from typing_extensions import NotRequired, Literal

import baml_py

from . import types
from .types import Checked, Check
from .type_builder import TypeBuilder


class BamlCallOptions(TypedDict, total=False):
    tb: NotRequired[TypeBuilder]
    client_registry: NotRequired[baml_py.baml_py.ClientRegistry]


class AsyncHttpRequest:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    async def EditMultipleSlides(
        self,
        requests: List[types.SlideEditRequest],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "EditMultipleSlides",
        {
          "requests": requests,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def EditSlide(
        self,
        request: types.SlideEditRequest,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "EditSlide",
        {
          "request": request,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GeneratePresentation(
        self,
        input: types.PresentationInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GeneratePresentation",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GenerateQuickOutline(
        self,
        content: str,audience: Optional[str],pages: Optional[str],scenario: Optional[str],tone: Optional[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateQuickOutline",
        {
          "content": content,
          "audience": audience,
          "pages": pages,
          "scenario": scenario,
          "tone": tone,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GenerateStrategicSalesOutline(
        self,
        input: types.DynamicInputContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateStrategicSalesOutline",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def ValidateEditedSlide(
        self,
        originalSlide: types.SlideContentWithType,editedSlide: types.SlideContentWithType,editPrompt: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "ValidateEditedSlide",
        {
          "originalSlide": originalSlide,
          "editedSlide": editedSlide,
          "editPrompt": editPrompt,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def ValidatePresentation(
        self,
        slides: List[types.SlideContent],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "ValidatePresentation",
        {
          "slides": slides,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    


class AsyncHttpStreamRequest:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    async def EditMultipleSlides(
        self,
        requests: List[types.SlideEditRequest],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "EditMultipleSlides",
        {
          "requests": requests,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def EditSlide(
        self,
        request: types.SlideEditRequest,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "EditSlide",
        {
          "request": request,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GeneratePresentation(
        self,
        input: types.PresentationInput,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GeneratePresentation",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GenerateQuickOutline(
        self,
        content: str,audience: Optional[str],pages: Optional[str],scenario: Optional[str],tone: Optional[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateQuickOutline",
        {
          "content": content,
          "audience": audience,
          "pages": pages,
          "scenario": scenario,
          "tone": tone,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GenerateStrategicSalesOutline(
        self,
        input: types.DynamicInputContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateStrategicSalesOutline",
        {
          "input": input,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def ValidateEditedSlide(
        self,
        originalSlide: types.SlideContentWithType,editedSlide: types.SlideContentWithType,editPrompt: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "ValidateEditedSlide",
        {
          "originalSlide": originalSlide,
          "editedSlide": editedSlide,
          "editPrompt": editPrompt,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def ValidatePresentation(
        self,
        slides: List[types.SlideContent],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "ValidatePresentation",
        {
          "slides": slides,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    


__all__ = ["AsyncHttpRequest", "AsyncHttpStreamRequest"]